// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sys_msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sys_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace pms {

void protobuf_ShutdownFile_sys_5fmsg_2eproto() {
  delete ConnMsg::default_instance_;
  delete RelayMsg::default_instance_;
  delete TransferMsg::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_sys_5fmsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_sys_5fmsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::pms::protobuf_AddDesc_common_5fmsg_2eproto();
  ::pms::protobuf_AddDesc_sys_5fmsg_5ftype_2eproto();
  ConnMsg::default_instance_ = new ConnMsg();
  RelayMsg::default_instance_ = new RelayMsg();
  TransferMsg::default_instance_ = new TransferMsg();
  ConnMsg::default_instance_->InitAsDefaultInstance();
  RelayMsg::default_instance_->InitAsDefaultInstance();
  TransferMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sys_5fmsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sys_5fmsg_2eproto_once_);
void protobuf_AddDesc_sys_5fmsg_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sys_5fmsg_2eproto_once_,
                 &protobuf_AddDesc_sys_5fmsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sys_5fmsg_2eproto {
  StaticDescriptorInitializer_sys_5fmsg_2eproto() {
    protobuf_AddDesc_sys_5fmsg_2eproto();
  }
} static_descriptor_initializer_sys_5fmsg_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnMsg::kConnTagFieldNumber;
const int ConnMsg::kTrModuleFieldNumber;
const int ConnMsg::kModuleidFieldNumber;
const int ConnMsg::kTransferidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnMsg::ConnMsg()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pms.ConnMsg)
}

void ConnMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConnMsg::ConnMsg(const ConnMsg& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pms.ConnMsg)
}

void ConnMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  conn_tag_ = 0;
  tr_module_ = 0;
  moduleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transferid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ConnMsg::~ConnMsg() {
  // @@protoc_insertion_point(destructor:pms.ConnMsg)
  SharedDtor();
}

void ConnMsg::SharedDtor() {
  moduleid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transferid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ConnMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConnMsg& ConnMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sys_5fmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sys_5fmsg_2eproto();
#endif
  return *default_instance_;
}

ConnMsg* ConnMsg::default_instance_ = NULL;

ConnMsg* ConnMsg::New(::google::protobuf::Arena* arena) const {
  ConnMsg* n = new ConnMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:pms.ConnMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConnMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConnMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(conn_tag_, tr_module_);
  moduleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transferid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ConnMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pms.ConnMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pms.EConnTag conn_tag = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_conn_tag(static_cast< ::pms::EConnTag >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tr_module;
        break;
      }

      // optional .pms.ETransferModule tr_module = 2;
      case 2: {
        if (tag == 16) {
         parse_tr_module:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tr_module(static_cast< ::pms::ETransferModule >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_moduleid;
        break;
      }

      // optional string moduleid = 3;
      case 3: {
        if (tag == 26) {
         parse_moduleid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_moduleid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->moduleid().data(), this->moduleid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pms.ConnMsg.moduleid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transferid;
        break;
      }

      // optional string transferid = 4;
      case 4: {
        if (tag == 34) {
         parse_transferid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transferid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transferid().data(), this->transferid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pms.ConnMsg.transferid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pms.ConnMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pms.ConnMsg)
  return false;
#undef DO_
}

void ConnMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pms.ConnMsg)
  // optional .pms.EConnTag conn_tag = 1;
  if (this->conn_tag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->conn_tag(), output);
  }

  // optional .pms.ETransferModule tr_module = 2;
  if (this->tr_module() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tr_module(), output);
  }

  // optional string moduleid = 3;
  if (this->moduleid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->moduleid().data(), this->moduleid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pms.ConnMsg.moduleid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->moduleid(), output);
  }

  // optional string transferid = 4;
  if (this->transferid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transferid().data(), this->transferid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pms.ConnMsg.transferid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->transferid(), output);
  }

  // @@protoc_insertion_point(serialize_end:pms.ConnMsg)
}

int ConnMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pms.ConnMsg)
  int total_size = 0;

  // optional .pms.EConnTag conn_tag = 1;
  if (this->conn_tag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->conn_tag());
  }

  // optional .pms.ETransferModule tr_module = 2;
  if (this->tr_module() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tr_module());
  }

  // optional string moduleid = 3;
  if (this->moduleid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->moduleid());
  }

  // optional string transferid = 4;
  if (this->transferid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transferid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConnMsg*>(&from));
}

void ConnMsg::MergeFrom(const ConnMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pms.ConnMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.conn_tag() != 0) {
    set_conn_tag(from.conn_tag());
  }
  if (from.tr_module() != 0) {
    set_tr_module(from.tr_module());
  }
  if (from.moduleid().size() > 0) {

    moduleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.moduleid_);
  }
  if (from.transferid().size() > 0) {

    transferid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transferid_);
  }
}

void ConnMsg::CopyFrom(const ConnMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pms.ConnMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMsg::IsInitialized() const {

  return true;
}

void ConnMsg::Swap(ConnMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnMsg::InternalSwap(ConnMsg* other) {
  std::swap(conn_tag_, other->conn_tag_);
  std::swap(tr_module_, other->tr_module_);
  moduleid_.Swap(&other->moduleid_);
  transferid_.Swap(&other->transferid_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ConnMsg::GetTypeName() const {
  return "pms.ConnMsg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnMsg

// optional .pms.EConnTag conn_tag = 1;
void ConnMsg::clear_conn_tag() {
  conn_tag_ = 0;
}
 ::pms::EConnTag ConnMsg::conn_tag() const {
  // @@protoc_insertion_point(field_get:pms.ConnMsg.conn_tag)
  return static_cast< ::pms::EConnTag >(conn_tag_);
}
 void ConnMsg::set_conn_tag(::pms::EConnTag value) {
  
  conn_tag_ = value;
  // @@protoc_insertion_point(field_set:pms.ConnMsg.conn_tag)
}

// optional .pms.ETransferModule tr_module = 2;
void ConnMsg::clear_tr_module() {
  tr_module_ = 0;
}
 ::pms::ETransferModule ConnMsg::tr_module() const {
  // @@protoc_insertion_point(field_get:pms.ConnMsg.tr_module)
  return static_cast< ::pms::ETransferModule >(tr_module_);
}
 void ConnMsg::set_tr_module(::pms::ETransferModule value) {
  
  tr_module_ = value;
  // @@protoc_insertion_point(field_set:pms.ConnMsg.tr_module)
}

// optional string moduleid = 3;
void ConnMsg::clear_moduleid() {
  moduleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConnMsg::moduleid() const {
  // @@protoc_insertion_point(field_get:pms.ConnMsg.moduleid)
  return moduleid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnMsg::set_moduleid(const ::std::string& value) {
  
  moduleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.ConnMsg.moduleid)
}
 void ConnMsg::set_moduleid(const char* value) {
  
  moduleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.ConnMsg.moduleid)
}
 void ConnMsg::set_moduleid(const char* value, size_t size) {
  
  moduleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.ConnMsg.moduleid)
}
 ::std::string* ConnMsg::mutable_moduleid() {
  
  // @@protoc_insertion_point(field_mutable:pms.ConnMsg.moduleid)
  return moduleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnMsg::release_moduleid() {
  // @@protoc_insertion_point(field_release:pms.ConnMsg.moduleid)
  
  return moduleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnMsg::set_allocated_moduleid(::std::string* moduleid) {
  if (moduleid != NULL) {
    
  } else {
    
  }
  moduleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moduleid);
  // @@protoc_insertion_point(field_set_allocated:pms.ConnMsg.moduleid)
}

// optional string transferid = 4;
void ConnMsg::clear_transferid() {
  transferid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConnMsg::transferid() const {
  // @@protoc_insertion_point(field_get:pms.ConnMsg.transferid)
  return transferid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnMsg::set_transferid(const ::std::string& value) {
  
  transferid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.ConnMsg.transferid)
}
 void ConnMsg::set_transferid(const char* value) {
  
  transferid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.ConnMsg.transferid)
}
 void ConnMsg::set_transferid(const char* value, size_t size) {
  
  transferid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.ConnMsg.transferid)
}
 ::std::string* ConnMsg::mutable_transferid() {
  
  // @@protoc_insertion_point(field_mutable:pms.ConnMsg.transferid)
  return transferid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnMsg::release_transferid() {
  // @@protoc_insertion_point(field_release:pms.ConnMsg.transferid)
  
  return transferid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnMsg::set_allocated_transferid(::std::string* transferid) {
  if (transferid != NULL) {
    
  } else {
    
  }
  transferid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transferid);
  // @@protoc_insertion_point(field_set_allocated:pms.ConnMsg.transferid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelayMsg::kSvrCmdsFieldNumber;
const int RelayMsg::kTrModuleFieldNumber;
const int RelayMsg::kContModuleFieldNumber;
const int RelayMsg::kConnectorFieldNumber;
const int RelayMsg::kHandleCmdFieldNumber;
const int RelayMsg::kHandleMtypeFieldNumber;
const int RelayMsg::kHandleDataFieldNumber;
const int RelayMsg::kContentFieldNumber;
const int RelayMsg::kTouserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelayMsg::RelayMsg()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pms.RelayMsg)
}

void RelayMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  touser_ = const_cast< ::pms::ToUser*>(
      ::pms::ToUser::internal_default_instance());
#else
  touser_ = const_cast< ::pms::ToUser*>(&::pms::ToUser::default_instance());
#endif
}

RelayMsg::RelayMsg(const RelayMsg& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pms.RelayMsg)
}

void RelayMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  svr_cmds_ = 0;
  tr_module_ = 0;
  cont_module_ = 0;
  connector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_mtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  touser_ = NULL;
}

RelayMsg::~RelayMsg() {
  // @@protoc_insertion_point(destructor:pms.RelayMsg)
  SharedDtor();
}

void RelayMsg::SharedDtor() {
  connector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_mtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete touser_;
  }
}

void RelayMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RelayMsg& RelayMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sys_5fmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sys_5fmsg_2eproto();
#endif
  return *default_instance_;
}

RelayMsg* RelayMsg::default_instance_ = NULL;

RelayMsg* RelayMsg::New(::google::protobuf::Arena* arena) const {
  RelayMsg* n = new RelayMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RelayMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:pms.RelayMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RelayMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RelayMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(svr_cmds_, tr_module_);
  cont_module_ = 0;
  connector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_mtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && touser_ != NULL) delete touser_;
  touser_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool RelayMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pms.RelayMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pms.EServerCmd svr_cmds = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_svr_cmds(static_cast< ::pms::EServerCmd >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tr_module;
        break;
      }

      // optional .pms.ETransferModule tr_module = 2;
      case 2: {
        if (tag == 16) {
         parse_tr_module:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tr_module(static_cast< ::pms::ETransferModule >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cont_module;
        break;
      }

      // optional .pms.EModuleType cont_module = 3;
      case 3: {
        if (tag == 24) {
         parse_cont_module:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cont_module(static_cast< ::pms::EModuleType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_connector;
        break;
      }

      // optional string connector = 4;
      case 4: {
        if (tag == 34) {
         parse_connector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connector()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connector().data(), this->connector().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pms.RelayMsg.connector"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_handle_cmd;
        break;
      }

      // optional string handle_cmd = 5;
      case 5: {
        if (tag == 42) {
         parse_handle_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handle_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handle_cmd().data(), this->handle_cmd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pms.RelayMsg.handle_cmd"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_handle_mtype;
        break;
      }

      // optional string handle_mtype = 6;
      case 6: {
        if (tag == 50) {
         parse_handle_mtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handle_mtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handle_mtype().data(), this->handle_mtype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pms.RelayMsg.handle_mtype"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_handle_data;
        break;
      }

      // optional string handle_data = 7;
      case 7: {
        if (tag == 58) {
         parse_handle_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_handle_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->handle_data().data(), this->handle_data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pms.RelayMsg.handle_data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_content;
        break;
      }

      // optional bytes content = 8;
      case 8: {
        if (tag == 66) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_touser;
        break;
      }

      // optional .pms.ToUser touser = 9;
      case 9: {
        if (tag == 74) {
         parse_touser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_touser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pms.RelayMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pms.RelayMsg)
  return false;
#undef DO_
}

void RelayMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pms.RelayMsg)
  // optional .pms.EServerCmd svr_cmds = 1;
  if (this->svr_cmds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->svr_cmds(), output);
  }

  // optional .pms.ETransferModule tr_module = 2;
  if (this->tr_module() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tr_module(), output);
  }

  // optional .pms.EModuleType cont_module = 3;
  if (this->cont_module() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cont_module(), output);
  }

  // optional string connector = 4;
  if (this->connector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connector().data(), this->connector().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pms.RelayMsg.connector");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->connector(), output);
  }

  // optional string handle_cmd = 5;
  if (this->handle_cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle_cmd().data(), this->handle_cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pms.RelayMsg.handle_cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->handle_cmd(), output);
  }

  // optional string handle_mtype = 6;
  if (this->handle_mtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle_mtype().data(), this->handle_mtype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pms.RelayMsg.handle_mtype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->handle_mtype(), output);
  }

  // optional string handle_data = 7;
  if (this->handle_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->handle_data().data(), this->handle_data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pms.RelayMsg.handle_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->handle_data(), output);
  }

  // optional bytes content = 8;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->content(), output);
  }

  // optional .pms.ToUser touser = 9;
  if (this->has_touser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->touser_, output);
  }

  // @@protoc_insertion_point(serialize_end:pms.RelayMsg)
}

int RelayMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pms.RelayMsg)
  int total_size = 0;

  // optional .pms.EServerCmd svr_cmds = 1;
  if (this->svr_cmds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->svr_cmds());
  }

  // optional .pms.ETransferModule tr_module = 2;
  if (this->tr_module() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tr_module());
  }

  // optional .pms.EModuleType cont_module = 3;
  if (this->cont_module() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cont_module());
  }

  // optional string connector = 4;
  if (this->connector().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connector());
  }

  // optional string handle_cmd = 5;
  if (this->handle_cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->handle_cmd());
  }

  // optional string handle_mtype = 6;
  if (this->handle_mtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->handle_mtype());
  }

  // optional string handle_data = 7;
  if (this->handle_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->handle_data());
  }

  // optional bytes content = 8;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // optional .pms.ToUser touser = 9;
  if (this->has_touser()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->touser_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelayMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RelayMsg*>(&from));
}

void RelayMsg::MergeFrom(const RelayMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pms.RelayMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.svr_cmds() != 0) {
    set_svr_cmds(from.svr_cmds());
  }
  if (from.tr_module() != 0) {
    set_tr_module(from.tr_module());
  }
  if (from.cont_module() != 0) {
    set_cont_module(from.cont_module());
  }
  if (from.connector().size() > 0) {

    connector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connector_);
  }
  if (from.handle_cmd().size() > 0) {

    handle_cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handle_cmd_);
  }
  if (from.handle_mtype().size() > 0) {

    handle_mtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handle_mtype_);
  }
  if (from.handle_data().size() > 0) {

    handle_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.handle_data_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_touser()) {
    mutable_touser()->::pms::ToUser::MergeFrom(from.touser());
  }
}

void RelayMsg::CopyFrom(const RelayMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pms.RelayMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayMsg::IsInitialized() const {

  return true;
}

void RelayMsg::Swap(RelayMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelayMsg::InternalSwap(RelayMsg* other) {
  std::swap(svr_cmds_, other->svr_cmds_);
  std::swap(tr_module_, other->tr_module_);
  std::swap(cont_module_, other->cont_module_);
  connector_.Swap(&other->connector_);
  handle_cmd_.Swap(&other->handle_cmd_);
  handle_mtype_.Swap(&other->handle_mtype_);
  handle_data_.Swap(&other->handle_data_);
  content_.Swap(&other->content_);
  std::swap(touser_, other->touser_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RelayMsg::GetTypeName() const {
  return "pms.RelayMsg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RelayMsg

// optional .pms.EServerCmd svr_cmds = 1;
void RelayMsg::clear_svr_cmds() {
  svr_cmds_ = 0;
}
 ::pms::EServerCmd RelayMsg::svr_cmds() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.svr_cmds)
  return static_cast< ::pms::EServerCmd >(svr_cmds_);
}
 void RelayMsg::set_svr_cmds(::pms::EServerCmd value) {
  
  svr_cmds_ = value;
  // @@protoc_insertion_point(field_set:pms.RelayMsg.svr_cmds)
}

// optional .pms.ETransferModule tr_module = 2;
void RelayMsg::clear_tr_module() {
  tr_module_ = 0;
}
 ::pms::ETransferModule RelayMsg::tr_module() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.tr_module)
  return static_cast< ::pms::ETransferModule >(tr_module_);
}
 void RelayMsg::set_tr_module(::pms::ETransferModule value) {
  
  tr_module_ = value;
  // @@protoc_insertion_point(field_set:pms.RelayMsg.tr_module)
}

// optional .pms.EModuleType cont_module = 3;
void RelayMsg::clear_cont_module() {
  cont_module_ = 0;
}
 ::pms::EModuleType RelayMsg::cont_module() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.cont_module)
  return static_cast< ::pms::EModuleType >(cont_module_);
}
 void RelayMsg::set_cont_module(::pms::EModuleType value) {
  
  cont_module_ = value;
  // @@protoc_insertion_point(field_set:pms.RelayMsg.cont_module)
}

// optional string connector = 4;
void RelayMsg::clear_connector() {
  connector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RelayMsg::connector() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.connector)
  return connector_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelayMsg::set_connector(const ::std::string& value) {
  
  connector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.RelayMsg.connector)
}
 void RelayMsg::set_connector(const char* value) {
  
  connector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.RelayMsg.connector)
}
 void RelayMsg::set_connector(const char* value, size_t size) {
  
  connector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.RelayMsg.connector)
}
 ::std::string* RelayMsg::mutable_connector() {
  
  // @@protoc_insertion_point(field_mutable:pms.RelayMsg.connector)
  return connector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RelayMsg::release_connector() {
  // @@protoc_insertion_point(field_release:pms.RelayMsg.connector)
  
  return connector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelayMsg::set_allocated_connector(::std::string* connector) {
  if (connector != NULL) {
    
  } else {
    
  }
  connector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connector);
  // @@protoc_insertion_point(field_set_allocated:pms.RelayMsg.connector)
}

// optional string handle_cmd = 5;
void RelayMsg::clear_handle_cmd() {
  handle_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RelayMsg::handle_cmd() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.handle_cmd)
  return handle_cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelayMsg::set_handle_cmd(const ::std::string& value) {
  
  handle_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.RelayMsg.handle_cmd)
}
 void RelayMsg::set_handle_cmd(const char* value) {
  
  handle_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.RelayMsg.handle_cmd)
}
 void RelayMsg::set_handle_cmd(const char* value, size_t size) {
  
  handle_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.RelayMsg.handle_cmd)
}
 ::std::string* RelayMsg::mutable_handle_cmd() {
  
  // @@protoc_insertion_point(field_mutable:pms.RelayMsg.handle_cmd)
  return handle_cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RelayMsg::release_handle_cmd() {
  // @@protoc_insertion_point(field_release:pms.RelayMsg.handle_cmd)
  
  return handle_cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelayMsg::set_allocated_handle_cmd(::std::string* handle_cmd) {
  if (handle_cmd != NULL) {
    
  } else {
    
  }
  handle_cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle_cmd);
  // @@protoc_insertion_point(field_set_allocated:pms.RelayMsg.handle_cmd)
}

// optional string handle_mtype = 6;
void RelayMsg::clear_handle_mtype() {
  handle_mtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RelayMsg::handle_mtype() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.handle_mtype)
  return handle_mtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelayMsg::set_handle_mtype(const ::std::string& value) {
  
  handle_mtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.RelayMsg.handle_mtype)
}
 void RelayMsg::set_handle_mtype(const char* value) {
  
  handle_mtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.RelayMsg.handle_mtype)
}
 void RelayMsg::set_handle_mtype(const char* value, size_t size) {
  
  handle_mtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.RelayMsg.handle_mtype)
}
 ::std::string* RelayMsg::mutable_handle_mtype() {
  
  // @@protoc_insertion_point(field_mutable:pms.RelayMsg.handle_mtype)
  return handle_mtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RelayMsg::release_handle_mtype() {
  // @@protoc_insertion_point(field_release:pms.RelayMsg.handle_mtype)
  
  return handle_mtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelayMsg::set_allocated_handle_mtype(::std::string* handle_mtype) {
  if (handle_mtype != NULL) {
    
  } else {
    
  }
  handle_mtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle_mtype);
  // @@protoc_insertion_point(field_set_allocated:pms.RelayMsg.handle_mtype)
}

// optional string handle_data = 7;
void RelayMsg::clear_handle_data() {
  handle_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RelayMsg::handle_data() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.handle_data)
  return handle_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelayMsg::set_handle_data(const ::std::string& value) {
  
  handle_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.RelayMsg.handle_data)
}
 void RelayMsg::set_handle_data(const char* value) {
  
  handle_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.RelayMsg.handle_data)
}
 void RelayMsg::set_handle_data(const char* value, size_t size) {
  
  handle_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.RelayMsg.handle_data)
}
 ::std::string* RelayMsg::mutable_handle_data() {
  
  // @@protoc_insertion_point(field_mutable:pms.RelayMsg.handle_data)
  return handle_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RelayMsg::release_handle_data() {
  // @@protoc_insertion_point(field_release:pms.RelayMsg.handle_data)
  
  return handle_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelayMsg::set_allocated_handle_data(::std::string* handle_data) {
  if (handle_data != NULL) {
    
  } else {
    
  }
  handle_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle_data);
  // @@protoc_insertion_point(field_set_allocated:pms.RelayMsg.handle_data)
}

// optional bytes content = 8;
void RelayMsg::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RelayMsg::content() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelayMsg::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.RelayMsg.content)
}
 void RelayMsg::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.RelayMsg.content)
}
 void RelayMsg::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.RelayMsg.content)
}
 ::std::string* RelayMsg::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:pms.RelayMsg.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RelayMsg::release_content() {
  // @@protoc_insertion_point(field_release:pms.RelayMsg.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RelayMsg::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:pms.RelayMsg.content)
}

// optional .pms.ToUser touser = 9;
bool RelayMsg::has_touser() const {
  return !_is_default_instance_ && touser_ != NULL;
}
void RelayMsg::clear_touser() {
  if (GetArenaNoVirtual() == NULL && touser_ != NULL) delete touser_;
  touser_ = NULL;
}
const ::pms::ToUser& RelayMsg::touser() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.touser)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return touser_ != NULL ? *touser_ : *default_instance().touser_;
#else
  return touser_ != NULL ? *touser_ : *default_instance_->touser_;
#endif
}
::pms::ToUser* RelayMsg::mutable_touser() {
  
  if (touser_ == NULL) {
    touser_ = new ::pms::ToUser;
  }
  // @@protoc_insertion_point(field_mutable:pms.RelayMsg.touser)
  return touser_;
}
::pms::ToUser* RelayMsg::release_touser() {
  // @@protoc_insertion_point(field_release:pms.RelayMsg.touser)
  
  ::pms::ToUser* temp = touser_;
  touser_ = NULL;
  return temp;
}
void RelayMsg::set_allocated_touser(::pms::ToUser* touser) {
  delete touser_;
  touser_ = touser;
  if (touser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pms.RelayMsg.touser)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferMsg::kTypeFieldNumber;
const int TransferMsg::kFlagFieldNumber;
const int TransferMsg::kPriorityFieldNumber;
const int TransferMsg::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferMsg::TransferMsg()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pms.TransferMsg)
}

void TransferMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TransferMsg::TransferMsg(const TransferMsg& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pms.TransferMsg)
}

void TransferMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  flag_ = 0;
  priority_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TransferMsg::~TransferMsg() {
  // @@protoc_insertion_point(destructor:pms.TransferMsg)
  SharedDtor();
}

void TransferMsg::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TransferMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransferMsg& TransferMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_sys_5fmsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_sys_5fmsg_2eproto();
#endif
  return *default_instance_;
}

TransferMsg* TransferMsg::default_instance_ = NULL;

TransferMsg* TransferMsg::New(::google::protobuf::Arena* arena) const {
  TransferMsg* n = new TransferMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:pms.TransferMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TransferMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransferMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, flag_);
  priority_ = 0;
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TransferMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pms.TransferMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pms.ETransferType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::pms::ETransferType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional .pms.ETransferFlag flag = 2;
      case 2: {
        if (tag == 16) {
         parse_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_flag(static_cast< ::pms::ETransferFlag >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_priority;
        break;
      }

      // optional .pms.ETransferPriority priority = 3;
      case 3: {
        if (tag == 24) {
         parse_priority:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_priority(static_cast< ::pms::ETransferPriority >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pms.TransferMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pms.TransferMsg)
  return false;
#undef DO_
}

void TransferMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pms.TransferMsg)
  // optional .pms.ETransferType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .pms.ETransferFlag flag = 2;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->flag(), output);
  }

  // optional .pms.ETransferPriority priority = 3;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->priority(), output);
  }

  // optional bytes content = 4;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  // @@protoc_insertion_point(serialize_end:pms.TransferMsg)
}

int TransferMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pms.TransferMsg)
  int total_size = 0;

  // optional .pms.ETransferType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .pms.ETransferFlag flag = 2;
  if (this->flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
  }

  // optional .pms.ETransferPriority priority = 3;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
  }

  // optional bytes content = 4;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransferMsg*>(&from));
}

void TransferMsg::MergeFrom(const TransferMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pms.TransferMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void TransferMsg::CopyFrom(const TransferMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pms.TransferMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferMsg::IsInitialized() const {

  return true;
}

void TransferMsg::Swap(TransferMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferMsg::InternalSwap(TransferMsg* other) {
  std::swap(type_, other->type_);
  std::swap(flag_, other->flag_);
  std::swap(priority_, other->priority_);
  content_.Swap(&other->content_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TransferMsg::GetTypeName() const {
  return "pms.TransferMsg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferMsg

// optional .pms.ETransferType type = 1;
void TransferMsg::clear_type() {
  type_ = 0;
}
 ::pms::ETransferType TransferMsg::type() const {
  // @@protoc_insertion_point(field_get:pms.TransferMsg.type)
  return static_cast< ::pms::ETransferType >(type_);
}
 void TransferMsg::set_type(::pms::ETransferType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pms.TransferMsg.type)
}

// optional .pms.ETransferFlag flag = 2;
void TransferMsg::clear_flag() {
  flag_ = 0;
}
 ::pms::ETransferFlag TransferMsg::flag() const {
  // @@protoc_insertion_point(field_get:pms.TransferMsg.flag)
  return static_cast< ::pms::ETransferFlag >(flag_);
}
 void TransferMsg::set_flag(::pms::ETransferFlag value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:pms.TransferMsg.flag)
}

// optional .pms.ETransferPriority priority = 3;
void TransferMsg::clear_priority() {
  priority_ = 0;
}
 ::pms::ETransferPriority TransferMsg::priority() const {
  // @@protoc_insertion_point(field_get:pms.TransferMsg.priority)
  return static_cast< ::pms::ETransferPriority >(priority_);
}
 void TransferMsg::set_priority(::pms::ETransferPriority value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:pms.TransferMsg.priority)
}

// optional bytes content = 4;
void TransferMsg::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TransferMsg::content() const {
  // @@protoc_insertion_point(field_get:pms.TransferMsg.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransferMsg::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.TransferMsg.content)
}
 void TransferMsg::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.TransferMsg.content)
}
 void TransferMsg::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.TransferMsg.content)
}
 ::std::string* TransferMsg::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:pms.TransferMsg.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TransferMsg::release_content() {
  // @@protoc_insertion_point(field_release:pms.TransferMsg.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TransferMsg::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:pms.TransferMsg.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pms

// @@protoc_insertion_point(global_scope)
