// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sys_msg.proto

#ifndef PROTOBUF_sys_5fmsg_2eproto__INCLUDED
#define PROTOBUF_sys_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "common_msg.pb.h"
#include "sys_msg_type.pb.h"
// @@protoc_insertion_point(includes)

namespace pms {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sys_5fmsg_2eproto();
void protobuf_AssignDesc_sys_5fmsg_2eproto();
void protobuf_ShutdownFile_sys_5fmsg_2eproto();

class ConnMsg;
class ErrorMsg;
class RelayMsg;
class TransferMsg;

// ===================================================================

class ConnMsg : public ::google::protobuf::MessageLite {
 public:
  ConnMsg();
  virtual ~ConnMsg();

  ConnMsg(const ConnMsg& from);

  inline ConnMsg& operator=(const ConnMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ConnMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ConnMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ConnMsg* other);

  // implements Message ----------------------------------------------

  inline ConnMsg* New() const { return New(NULL); }

  ConnMsg* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ConnMsg& from);
  void MergeFrom(const ConnMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pms.EConnTag conn_tag = 1;
  void clear_conn_tag();
  static const int kConnTagFieldNumber = 1;
  ::pms::EConnTag conn_tag() const;
  void set_conn_tag(::pms::EConnTag value);

  // optional .pms.ETransferModule tr_module = 2;
  void clear_tr_module();
  static const int kTrModuleFieldNumber = 2;
  ::pms::ETransferModule tr_module() const;
  void set_tr_module(::pms::ETransferModule value);

  // optional string moduleid = 3;
  void clear_moduleid();
  static const int kModuleidFieldNumber = 3;
  const ::std::string& moduleid() const;
  void set_moduleid(const ::std::string& value);
  void set_moduleid(const char* value);
  void set_moduleid(const char* value, size_t size);
  ::std::string* mutable_moduleid();
  ::std::string* release_moduleid();
  void set_allocated_moduleid(::std::string* moduleid);

  // optional string transferid = 4;
  void clear_transferid();
  static const int kTransferidFieldNumber = 4;
  const ::std::string& transferid() const;
  void set_transferid(const ::std::string& value);
  void set_transferid(const char* value);
  void set_transferid(const char* value, size_t size);
  ::std::string* mutable_transferid();
  ::std::string* release_transferid();
  void set_allocated_transferid(::std::string* transferid);

  // @@protoc_insertion_point(class_scope:pms.ConnMsg)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  int conn_tag_;
  int tr_module_;
  ::google::protobuf::internal::ArenaStringPtr moduleid_;
  ::google::protobuf::internal::ArenaStringPtr transferid_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_sys_5fmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_sys_5fmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_sys_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_sys_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static ConnMsg* default_instance_;
};
// -------------------------------------------------------------------

class RelayMsg : public ::google::protobuf::MessageLite {
 public:
  RelayMsg();
  virtual ~RelayMsg();

  RelayMsg(const RelayMsg& from);

  inline RelayMsg& operator=(const RelayMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const RelayMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RelayMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RelayMsg* other);

  // implements Message ----------------------------------------------

  inline RelayMsg* New() const { return New(NULL); }

  RelayMsg* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RelayMsg& from);
  void MergeFrom(const RelayMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RelayMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pms.EServerCmd svr_cmds = 1;
  void clear_svr_cmds();
  static const int kSvrCmdsFieldNumber = 1;
  ::pms::EServerCmd svr_cmds() const;
  void set_svr_cmds(::pms::EServerCmd value);

  // optional .pms.ETransferModule tr_module = 2;
  void clear_tr_module();
  static const int kTrModuleFieldNumber = 2;
  ::pms::ETransferModule tr_module() const;
  void set_tr_module(::pms::ETransferModule value);

  // optional .pms.EModuleType cont_module = 3;
  void clear_cont_module();
  static const int kContModuleFieldNumber = 3;
  ::pms::EModuleType cont_module() const;
  void set_cont_module(::pms::EModuleType value);

  // optional string connector = 4;
  void clear_connector();
  static const int kConnectorFieldNumber = 4;
  const ::std::string& connector() const;
  void set_connector(const ::std::string& value);
  void set_connector(const char* value);
  void set_connector(const char* value, size_t size);
  ::std::string* mutable_connector();
  ::std::string* release_connector();
  void set_allocated_connector(::std::string* connector);

  // optional string handle_cmd = 5;
  void clear_handle_cmd();
  static const int kHandleCmdFieldNumber = 5;
  const ::std::string& handle_cmd() const;
  void set_handle_cmd(const ::std::string& value);
  void set_handle_cmd(const char* value);
  void set_handle_cmd(const char* value, size_t size);
  ::std::string* mutable_handle_cmd();
  ::std::string* release_handle_cmd();
  void set_allocated_handle_cmd(::std::string* handle_cmd);

  // optional string handle_mtype = 6;
  void clear_handle_mtype();
  static const int kHandleMtypeFieldNumber = 6;
  const ::std::string& handle_mtype() const;
  void set_handle_mtype(const ::std::string& value);
  void set_handle_mtype(const char* value);
  void set_handle_mtype(const char* value, size_t size);
  ::std::string* mutable_handle_mtype();
  ::std::string* release_handle_mtype();
  void set_allocated_handle_mtype(::std::string* handle_mtype);

  // optional string handle_data = 7;
  void clear_handle_data();
  static const int kHandleDataFieldNumber = 7;
  const ::std::string& handle_data() const;
  void set_handle_data(const ::std::string& value);
  void set_handle_data(const char* value);
  void set_handle_data(const char* value, size_t size);
  ::std::string* mutable_handle_data();
  ::std::string* release_handle_data();
  void set_allocated_handle_data(::std::string* handle_data);

  // optional bytes content = 8;
  void clear_content();
  static const int kContentFieldNumber = 8;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional .pms.ToUser touser = 9;
  bool has_touser() const;
  void clear_touser();
  static const int kTouserFieldNumber = 9;
  const ::pms::ToUser& touser() const;
  ::pms::ToUser* mutable_touser();
  ::pms::ToUser* release_touser();
  void set_allocated_touser(::pms::ToUser* touser);

  // @@protoc_insertion_point(class_scope:pms.RelayMsg)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  int svr_cmds_;
  int tr_module_;
  ::google::protobuf::internal::ArenaStringPtr connector_;
  ::google::protobuf::internal::ArenaStringPtr handle_cmd_;
  ::google::protobuf::internal::ArenaStringPtr handle_mtype_;
  ::google::protobuf::internal::ArenaStringPtr handle_data_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::pms::ToUser* touser_;
  int cont_module_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_sys_5fmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_sys_5fmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_sys_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_sys_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static RelayMsg* default_instance_;
};
// -------------------------------------------------------------------

class TransferMsg : public ::google::protobuf::MessageLite {
 public:
  TransferMsg();
  virtual ~TransferMsg();

  TransferMsg(const TransferMsg& from);

  inline TransferMsg& operator=(const TransferMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const TransferMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TransferMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TransferMsg* other);

  // implements Message ----------------------------------------------

  inline TransferMsg* New() const { return New(NULL); }

  TransferMsg* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TransferMsg& from);
  void MergeFrom(const TransferMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransferMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pms.ETransferType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::pms::ETransferType type() const;
  void set_type(::pms::ETransferType value);

  // optional .pms.ETransferFlag flag = 2;
  void clear_flag();
  static const int kFlagFieldNumber = 2;
  ::pms::ETransferFlag flag() const;
  void set_flag(::pms::ETransferFlag value);

  // optional .pms.ETransferPriority priority = 3;
  void clear_priority();
  static const int kPriorityFieldNumber = 3;
  ::pms::ETransferPriority priority() const;
  void set_priority(::pms::ETransferPriority value);

  // optional bytes content = 4;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:pms.TransferMsg)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  int type_;
  int flag_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  int priority_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_sys_5fmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_sys_5fmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_sys_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_sys_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static TransferMsg* default_instance_;
};
// -------------------------------------------------------------------

class ErrorMsg : public ::google::protobuf::MessageLite {
 public:
  ErrorMsg();
  virtual ~ErrorMsg();

  ErrorMsg(const ErrorMsg& from);

  inline ErrorMsg& operator=(const ErrorMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ErrorMsg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ErrorMsg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ErrorMsg* other);

  // implements Message ----------------------------------------------

  inline ErrorMsg* New() const { return New(NULL); }

  ErrorMsg* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ErrorMsg& from);
  void MergeFrom(const ErrorMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ErrorMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pms.ETransferModule emodule = 1;
  void clear_emodule();
  static const int kEmoduleFieldNumber = 1;
  ::pms::ETransferModule emodule() const;
  void set_emodule(::pms::ETransferModule value);

  // optional string userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string reason = 3;
  void clear_reason();
  static const int kReasonFieldNumber = 3;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // optional int32 errcode = 4;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 4;
  ::google::protobuf::int32 errcode() const;
  void set_errcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pms.ErrorMsg)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  int emodule_;
  ::google::protobuf::int32 errcode_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_sys_5fmsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_sys_5fmsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_sys_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_sys_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static ErrorMsg* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnMsg

// optional .pms.EConnTag conn_tag = 1;
inline void ConnMsg::clear_conn_tag() {
  conn_tag_ = 0;
}
inline ::pms::EConnTag ConnMsg::conn_tag() const {
  // @@protoc_insertion_point(field_get:pms.ConnMsg.conn_tag)
  return static_cast< ::pms::EConnTag >(conn_tag_);
}
inline void ConnMsg::set_conn_tag(::pms::EConnTag value) {
  
  conn_tag_ = value;
  // @@protoc_insertion_point(field_set:pms.ConnMsg.conn_tag)
}

// optional .pms.ETransferModule tr_module = 2;
inline void ConnMsg::clear_tr_module() {
  tr_module_ = 0;
}
inline ::pms::ETransferModule ConnMsg::tr_module() const {
  // @@protoc_insertion_point(field_get:pms.ConnMsg.tr_module)
  return static_cast< ::pms::ETransferModule >(tr_module_);
}
inline void ConnMsg::set_tr_module(::pms::ETransferModule value) {
  
  tr_module_ = value;
  // @@protoc_insertion_point(field_set:pms.ConnMsg.tr_module)
}

// optional string moduleid = 3;
inline void ConnMsg::clear_moduleid() {
  moduleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnMsg::moduleid() const {
  // @@protoc_insertion_point(field_get:pms.ConnMsg.moduleid)
  return moduleid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnMsg::set_moduleid(const ::std::string& value) {
  
  moduleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.ConnMsg.moduleid)
}
inline void ConnMsg::set_moduleid(const char* value) {
  
  moduleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.ConnMsg.moduleid)
}
inline void ConnMsg::set_moduleid(const char* value, size_t size) {
  
  moduleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.ConnMsg.moduleid)
}
inline ::std::string* ConnMsg::mutable_moduleid() {
  
  // @@protoc_insertion_point(field_mutable:pms.ConnMsg.moduleid)
  return moduleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnMsg::release_moduleid() {
  // @@protoc_insertion_point(field_release:pms.ConnMsg.moduleid)
  
  return moduleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnMsg::set_allocated_moduleid(::std::string* moduleid) {
  if (moduleid != NULL) {
    
  } else {
    
  }
  moduleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), moduleid);
  // @@protoc_insertion_point(field_set_allocated:pms.ConnMsg.moduleid)
}

// optional string transferid = 4;
inline void ConnMsg::clear_transferid() {
  transferid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnMsg::transferid() const {
  // @@protoc_insertion_point(field_get:pms.ConnMsg.transferid)
  return transferid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnMsg::set_transferid(const ::std::string& value) {
  
  transferid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.ConnMsg.transferid)
}
inline void ConnMsg::set_transferid(const char* value) {
  
  transferid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.ConnMsg.transferid)
}
inline void ConnMsg::set_transferid(const char* value, size_t size) {
  
  transferid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.ConnMsg.transferid)
}
inline ::std::string* ConnMsg::mutable_transferid() {
  
  // @@protoc_insertion_point(field_mutable:pms.ConnMsg.transferid)
  return transferid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnMsg::release_transferid() {
  // @@protoc_insertion_point(field_release:pms.ConnMsg.transferid)
  
  return transferid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnMsg::set_allocated_transferid(::std::string* transferid) {
  if (transferid != NULL) {
    
  } else {
    
  }
  transferid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transferid);
  // @@protoc_insertion_point(field_set_allocated:pms.ConnMsg.transferid)
}

// -------------------------------------------------------------------

// RelayMsg

// optional .pms.EServerCmd svr_cmds = 1;
inline void RelayMsg::clear_svr_cmds() {
  svr_cmds_ = 0;
}
inline ::pms::EServerCmd RelayMsg::svr_cmds() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.svr_cmds)
  return static_cast< ::pms::EServerCmd >(svr_cmds_);
}
inline void RelayMsg::set_svr_cmds(::pms::EServerCmd value) {
  
  svr_cmds_ = value;
  // @@protoc_insertion_point(field_set:pms.RelayMsg.svr_cmds)
}

// optional .pms.ETransferModule tr_module = 2;
inline void RelayMsg::clear_tr_module() {
  tr_module_ = 0;
}
inline ::pms::ETransferModule RelayMsg::tr_module() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.tr_module)
  return static_cast< ::pms::ETransferModule >(tr_module_);
}
inline void RelayMsg::set_tr_module(::pms::ETransferModule value) {
  
  tr_module_ = value;
  // @@protoc_insertion_point(field_set:pms.RelayMsg.tr_module)
}

// optional .pms.EModuleType cont_module = 3;
inline void RelayMsg::clear_cont_module() {
  cont_module_ = 0;
}
inline ::pms::EModuleType RelayMsg::cont_module() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.cont_module)
  return static_cast< ::pms::EModuleType >(cont_module_);
}
inline void RelayMsg::set_cont_module(::pms::EModuleType value) {
  
  cont_module_ = value;
  // @@protoc_insertion_point(field_set:pms.RelayMsg.cont_module)
}

// optional string connector = 4;
inline void RelayMsg::clear_connector() {
  connector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RelayMsg::connector() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.connector)
  return connector_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelayMsg::set_connector(const ::std::string& value) {
  
  connector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.RelayMsg.connector)
}
inline void RelayMsg::set_connector(const char* value) {
  
  connector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.RelayMsg.connector)
}
inline void RelayMsg::set_connector(const char* value, size_t size) {
  
  connector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.RelayMsg.connector)
}
inline ::std::string* RelayMsg::mutable_connector() {
  
  // @@protoc_insertion_point(field_mutable:pms.RelayMsg.connector)
  return connector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RelayMsg::release_connector() {
  // @@protoc_insertion_point(field_release:pms.RelayMsg.connector)
  
  return connector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelayMsg::set_allocated_connector(::std::string* connector) {
  if (connector != NULL) {
    
  } else {
    
  }
  connector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connector);
  // @@protoc_insertion_point(field_set_allocated:pms.RelayMsg.connector)
}

// optional string handle_cmd = 5;
inline void RelayMsg::clear_handle_cmd() {
  handle_cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RelayMsg::handle_cmd() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.handle_cmd)
  return handle_cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelayMsg::set_handle_cmd(const ::std::string& value) {
  
  handle_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.RelayMsg.handle_cmd)
}
inline void RelayMsg::set_handle_cmd(const char* value) {
  
  handle_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.RelayMsg.handle_cmd)
}
inline void RelayMsg::set_handle_cmd(const char* value, size_t size) {
  
  handle_cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.RelayMsg.handle_cmd)
}
inline ::std::string* RelayMsg::mutable_handle_cmd() {
  
  // @@protoc_insertion_point(field_mutable:pms.RelayMsg.handle_cmd)
  return handle_cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RelayMsg::release_handle_cmd() {
  // @@protoc_insertion_point(field_release:pms.RelayMsg.handle_cmd)
  
  return handle_cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelayMsg::set_allocated_handle_cmd(::std::string* handle_cmd) {
  if (handle_cmd != NULL) {
    
  } else {
    
  }
  handle_cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle_cmd);
  // @@protoc_insertion_point(field_set_allocated:pms.RelayMsg.handle_cmd)
}

// optional string handle_mtype = 6;
inline void RelayMsg::clear_handle_mtype() {
  handle_mtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RelayMsg::handle_mtype() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.handle_mtype)
  return handle_mtype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelayMsg::set_handle_mtype(const ::std::string& value) {
  
  handle_mtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.RelayMsg.handle_mtype)
}
inline void RelayMsg::set_handle_mtype(const char* value) {
  
  handle_mtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.RelayMsg.handle_mtype)
}
inline void RelayMsg::set_handle_mtype(const char* value, size_t size) {
  
  handle_mtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.RelayMsg.handle_mtype)
}
inline ::std::string* RelayMsg::mutable_handle_mtype() {
  
  // @@protoc_insertion_point(field_mutable:pms.RelayMsg.handle_mtype)
  return handle_mtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RelayMsg::release_handle_mtype() {
  // @@protoc_insertion_point(field_release:pms.RelayMsg.handle_mtype)
  
  return handle_mtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelayMsg::set_allocated_handle_mtype(::std::string* handle_mtype) {
  if (handle_mtype != NULL) {
    
  } else {
    
  }
  handle_mtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle_mtype);
  // @@protoc_insertion_point(field_set_allocated:pms.RelayMsg.handle_mtype)
}

// optional string handle_data = 7;
inline void RelayMsg::clear_handle_data() {
  handle_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RelayMsg::handle_data() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.handle_data)
  return handle_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelayMsg::set_handle_data(const ::std::string& value) {
  
  handle_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.RelayMsg.handle_data)
}
inline void RelayMsg::set_handle_data(const char* value) {
  
  handle_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.RelayMsg.handle_data)
}
inline void RelayMsg::set_handle_data(const char* value, size_t size) {
  
  handle_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.RelayMsg.handle_data)
}
inline ::std::string* RelayMsg::mutable_handle_data() {
  
  // @@protoc_insertion_point(field_mutable:pms.RelayMsg.handle_data)
  return handle_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RelayMsg::release_handle_data() {
  // @@protoc_insertion_point(field_release:pms.RelayMsg.handle_data)
  
  return handle_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelayMsg::set_allocated_handle_data(::std::string* handle_data) {
  if (handle_data != NULL) {
    
  } else {
    
  }
  handle_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), handle_data);
  // @@protoc_insertion_point(field_set_allocated:pms.RelayMsg.handle_data)
}

// optional bytes content = 8;
inline void RelayMsg::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RelayMsg::content() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelayMsg::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.RelayMsg.content)
}
inline void RelayMsg::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.RelayMsg.content)
}
inline void RelayMsg::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.RelayMsg.content)
}
inline ::std::string* RelayMsg::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:pms.RelayMsg.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RelayMsg::release_content() {
  // @@protoc_insertion_point(field_release:pms.RelayMsg.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RelayMsg::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:pms.RelayMsg.content)
}

// optional .pms.ToUser touser = 9;
inline bool RelayMsg::has_touser() const {
  return !_is_default_instance_ && touser_ != NULL;
}
inline void RelayMsg::clear_touser() {
  if (GetArenaNoVirtual() == NULL && touser_ != NULL) delete touser_;
  touser_ = NULL;
}
inline const ::pms::ToUser& RelayMsg::touser() const {
  // @@protoc_insertion_point(field_get:pms.RelayMsg.touser)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return touser_ != NULL ? *touser_ : *default_instance().touser_;
#else
  return touser_ != NULL ? *touser_ : *default_instance_->touser_;
#endif
}
inline ::pms::ToUser* RelayMsg::mutable_touser() {
  
  if (touser_ == NULL) {
    touser_ = new ::pms::ToUser;
  }
  // @@protoc_insertion_point(field_mutable:pms.RelayMsg.touser)
  return touser_;
}
inline ::pms::ToUser* RelayMsg::release_touser() {
  // @@protoc_insertion_point(field_release:pms.RelayMsg.touser)
  
  ::pms::ToUser* temp = touser_;
  touser_ = NULL;
  return temp;
}
inline void RelayMsg::set_allocated_touser(::pms::ToUser* touser) {
  delete touser_;
  touser_ = touser;
  if (touser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pms.RelayMsg.touser)
}

// -------------------------------------------------------------------

// TransferMsg

// optional .pms.ETransferType type = 1;
inline void TransferMsg::clear_type() {
  type_ = 0;
}
inline ::pms::ETransferType TransferMsg::type() const {
  // @@protoc_insertion_point(field_get:pms.TransferMsg.type)
  return static_cast< ::pms::ETransferType >(type_);
}
inline void TransferMsg::set_type(::pms::ETransferType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:pms.TransferMsg.type)
}

// optional .pms.ETransferFlag flag = 2;
inline void TransferMsg::clear_flag() {
  flag_ = 0;
}
inline ::pms::ETransferFlag TransferMsg::flag() const {
  // @@protoc_insertion_point(field_get:pms.TransferMsg.flag)
  return static_cast< ::pms::ETransferFlag >(flag_);
}
inline void TransferMsg::set_flag(::pms::ETransferFlag value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:pms.TransferMsg.flag)
}

// optional .pms.ETransferPriority priority = 3;
inline void TransferMsg::clear_priority() {
  priority_ = 0;
}
inline ::pms::ETransferPriority TransferMsg::priority() const {
  // @@protoc_insertion_point(field_get:pms.TransferMsg.priority)
  return static_cast< ::pms::ETransferPriority >(priority_);
}
inline void TransferMsg::set_priority(::pms::ETransferPriority value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:pms.TransferMsg.priority)
}

// optional bytes content = 4;
inline void TransferMsg::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferMsg::content() const {
  // @@protoc_insertion_point(field_get:pms.TransferMsg.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferMsg::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.TransferMsg.content)
}
inline void TransferMsg::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.TransferMsg.content)
}
inline void TransferMsg::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.TransferMsg.content)
}
inline ::std::string* TransferMsg::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:pms.TransferMsg.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferMsg::release_content() {
  // @@protoc_insertion_point(field_release:pms.TransferMsg.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferMsg::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:pms.TransferMsg.content)
}

// -------------------------------------------------------------------

// ErrorMsg

// optional .pms.ETransferModule emodule = 1;
inline void ErrorMsg::clear_emodule() {
  emodule_ = 0;
}
inline ::pms::ETransferModule ErrorMsg::emodule() const {
  // @@protoc_insertion_point(field_get:pms.ErrorMsg.emodule)
  return static_cast< ::pms::ETransferModule >(emodule_);
}
inline void ErrorMsg::set_emodule(::pms::ETransferModule value) {
  
  emodule_ = value;
  // @@protoc_insertion_point(field_set:pms.ErrorMsg.emodule)
}

// optional string userid = 2;
inline void ErrorMsg::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorMsg::userid() const {
  // @@protoc_insertion_point(field_get:pms.ErrorMsg.userid)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorMsg::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.ErrorMsg.userid)
}
inline void ErrorMsg::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.ErrorMsg.userid)
}
inline void ErrorMsg::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.ErrorMsg.userid)
}
inline ::std::string* ErrorMsg::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:pms.ErrorMsg.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorMsg::release_userid() {
  // @@protoc_insertion_point(field_release:pms.ErrorMsg.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorMsg::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:pms.ErrorMsg.userid)
}

// optional string reason = 3;
inline void ErrorMsg::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorMsg::reason() const {
  // @@protoc_insertion_point(field_get:pms.ErrorMsg.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorMsg::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pms.ErrorMsg.reason)
}
inline void ErrorMsg::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pms.ErrorMsg.reason)
}
inline void ErrorMsg::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pms.ErrorMsg.reason)
}
inline ::std::string* ErrorMsg::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:pms.ErrorMsg.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorMsg::release_reason() {
  // @@protoc_insertion_point(field_release:pms.ErrorMsg.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorMsg::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:pms.ErrorMsg.reason)
}

// optional int32 errcode = 4;
inline void ErrorMsg::clear_errcode() {
  errcode_ = 0;
}
inline ::google::protobuf::int32 ErrorMsg::errcode() const {
  // @@protoc_insertion_point(field_get:pms.ErrorMsg.errcode)
  return errcode_;
}
inline void ErrorMsg::set_errcode(::google::protobuf::int32 value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:pms.ErrorMsg.errcode)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pms

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sys_5fmsg_2eproto__INCLUDED
