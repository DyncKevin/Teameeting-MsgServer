// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage_msg.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "StorageMsg.pbobjc.h"
#import "StorageMsgType.pbobjc.h"
#import "CommonMsg.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - StorageMsgRoot

@implementation StorageMsgRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[StorageMsgTypeRoot extensionRegistry]];
    [registry addExtensions:[CommonMsgRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - StorageMsgRoot_FileDescriptor

static GPBFileDescriptor *StorageMsgRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pms"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - StorageMsg

@implementation StorageMsg

@dynamic rsvrcmd;
@dynamic tsvrcmd;
@dynamic mtag;
@dynamic mflag;
@dynamic mrole;
@dynamic result;
@dynamic sequence;
@dynamic maxseqn;
@dynamic msgid;
@dynamic storeid;
@dynamic ruserid;
@dynamic groupid;
@dynamic version;
@dynamic mtype;
@dynamic ispush;
@dynamic content;
@dynamic conttype;
@dynamic module;
@dynamic sdmaxseqn;

typedef struct StorageMsg__storage_ {
  uint32_t _has_storage_[1];
  EServerCmd rsvrcmd;
  EServerCmd tsvrcmd;
  EStorageTag mtag;
  EMsgFlag mflag;
  EMsgRole mrole;
  int32_t result;
  EStoreContType conttype;
  EModuleType module;
  NSString *msgid;
  NSString *storeid;
  NSString *ruserid;
  NSString *groupid;
  NSString *version;
  NSString *mtype;
  NSString *ispush;
  NSData *content;
  int64_t sequence;
  int64_t maxseqn;
  int64_t sdmaxseqn;
} StorageMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rsvrcmd",
        .dataTypeSpecific.enumDescFunc = EServerCmd_EnumDescriptor,
        .number = StorageMsg_FieldNumber_Rsvrcmd,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, rsvrcmd),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "tsvrcmd",
        .dataTypeSpecific.enumDescFunc = EServerCmd_EnumDescriptor,
        .number = StorageMsg_FieldNumber_Tsvrcmd,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, tsvrcmd),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "mtag",
        .dataTypeSpecific.enumDescFunc = EStorageTag_EnumDescriptor,
        .number = StorageMsg_FieldNumber_Mtag,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, mtag),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "mflag",
        .dataTypeSpecific.enumDescFunc = EMsgFlag_EnumDescriptor,
        .number = StorageMsg_FieldNumber_Mflag,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, mflag),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "mrole",
        .dataTypeSpecific.enumDescFunc = EMsgRole_EnumDescriptor,
        .number = StorageMsg_FieldNumber_Mrole,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, mrole),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = StorageMsg_FieldNumber_Result,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
      },
      {
        .name = "sequence",
        .dataTypeSpecific.className = NULL,
        .number = StorageMsg_FieldNumber_Sequence,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, sequence),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "maxseqn",
        .dataTypeSpecific.className = NULL,
        .number = StorageMsg_FieldNumber_Maxseqn,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, maxseqn),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
      {
        .name = "msgid",
        .dataTypeSpecific.className = NULL,
        .number = StorageMsg_FieldNumber_Msgid,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, msgid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "storeid",
        .dataTypeSpecific.className = NULL,
        .number = StorageMsg_FieldNumber_Storeid,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, storeid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ruserid",
        .dataTypeSpecific.className = NULL,
        .number = StorageMsg_FieldNumber_Ruserid,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, ruserid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "groupid",
        .dataTypeSpecific.className = NULL,
        .number = StorageMsg_FieldNumber_Groupid,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, groupid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = StorageMsg_FieldNumber_Version,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mtype",
        .dataTypeSpecific.className = NULL,
        .number = StorageMsg_FieldNumber_Mtype,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, mtype),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ispush",
        .dataTypeSpecific.className = NULL,
        .number = StorageMsg_FieldNumber_Ispush,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, ispush),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = StorageMsg_FieldNumber_Content,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "conttype",
        .dataTypeSpecific.enumDescFunc = EStoreContType_EnumDescriptor,
        .number = StorageMsg_FieldNumber_Conttype,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, conttype),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "module",
        .dataTypeSpecific.enumDescFunc = EModuleType_EnumDescriptor,
        .number = StorageMsg_FieldNumber_Module,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, module),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sdmaxseqn",
        .dataTypeSpecific.className = NULL,
        .number = StorageMsg_FieldNumber_Sdmaxseqn,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(StorageMsg__storage_, sdmaxseqn),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[StorageMsg class]
                                     rootClass:[StorageMsgRoot class]
                                          file:StorageMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(StorageMsg__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t StorageMsg_Rsvrcmd_RawValue(StorageMsg *message) {
  GPBDescriptor *descriptor = [StorageMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StorageMsg_FieldNumber_Rsvrcmd];
  return GPBGetMessageInt32Field(message, field);
}

void SetStorageMsg_Rsvrcmd_RawValue(StorageMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [StorageMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StorageMsg_FieldNumber_Rsvrcmd];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t StorageMsg_Tsvrcmd_RawValue(StorageMsg *message) {
  GPBDescriptor *descriptor = [StorageMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StorageMsg_FieldNumber_Tsvrcmd];
  return GPBGetMessageInt32Field(message, field);
}

void SetStorageMsg_Tsvrcmd_RawValue(StorageMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [StorageMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StorageMsg_FieldNumber_Tsvrcmd];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t StorageMsg_Mtag_RawValue(StorageMsg *message) {
  GPBDescriptor *descriptor = [StorageMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StorageMsg_FieldNumber_Mtag];
  return GPBGetMessageInt32Field(message, field);
}

void SetStorageMsg_Mtag_RawValue(StorageMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [StorageMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StorageMsg_FieldNumber_Mtag];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t StorageMsg_Mflag_RawValue(StorageMsg *message) {
  GPBDescriptor *descriptor = [StorageMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StorageMsg_FieldNumber_Mflag];
  return GPBGetMessageInt32Field(message, field);
}

void SetStorageMsg_Mflag_RawValue(StorageMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [StorageMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StorageMsg_FieldNumber_Mflag];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t StorageMsg_Mrole_RawValue(StorageMsg *message) {
  GPBDescriptor *descriptor = [StorageMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StorageMsg_FieldNumber_Mrole];
  return GPBGetMessageInt32Field(message, field);
}

void SetStorageMsg_Mrole_RawValue(StorageMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [StorageMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StorageMsg_FieldNumber_Mrole];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t StorageMsg_Conttype_RawValue(StorageMsg *message) {
  GPBDescriptor *descriptor = [StorageMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StorageMsg_FieldNumber_Conttype];
  return GPBGetMessageInt32Field(message, field);
}

void SetStorageMsg_Conttype_RawValue(StorageMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [StorageMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StorageMsg_FieldNumber_Conttype];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t StorageMsg_Module_RawValue(StorageMsg *message) {
  GPBDescriptor *descriptor = [StorageMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StorageMsg_FieldNumber_Module];
  return GPBGetMessageInt32Field(message, field);
}

void SetStorageMsg_Module_RawValue(StorageMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [StorageMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:StorageMsg_FieldNumber_Module];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PackedStoreMsg

@implementation PackedStoreMsg

@dynamic msgsArray, msgsArray_Count;

typedef struct PackedStoreMsg__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *msgsArray;
} PackedStoreMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msgsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(StorageMsg),
        .number = PackedStoreMsg_FieldNumber_MsgsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PackedStoreMsg__storage_, msgsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PackedStoreMsg class]
                                     rootClass:[StorageMsgRoot class]
                                          file:StorageMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PackedStoreMsg__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
