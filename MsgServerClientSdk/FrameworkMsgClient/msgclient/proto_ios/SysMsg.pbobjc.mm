// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sys_msg.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "SysMsg.pbobjc.h"
#import "CommonMsg.pbobjc.h"
#import "SysMsgType.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SysMsgRoot

@implementation SysMsgRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[CommonMsgRoot extensionRegistry]];
    [registry addExtensions:[SysMsgTypeRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - SysMsgRoot_FileDescriptor

static GPBFileDescriptor *SysMsgRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"pms"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ConnMsg

@implementation ConnMsg

@dynamic connTag;
@dynamic trModule;
@dynamic moduleid;
@dynamic transferid;

typedef struct ConnMsg__storage_ {
  uint32_t _has_storage_[1];
  EConnTag connTag;
  ETransferModule trModule;
  NSString *moduleid;
  NSString *transferid;
} ConnMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "connTag",
        .dataTypeSpecific.enumDescFunc = EConnTag_EnumDescriptor,
        .number = ConnMsg_FieldNumber_ConnTag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ConnMsg__storage_, connTag),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "trModule",
        .dataTypeSpecific.enumDescFunc = ETransferModule_EnumDescriptor,
        .number = ConnMsg_FieldNumber_TrModule,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ConnMsg__storage_, trModule),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "moduleid",
        .dataTypeSpecific.className = NULL,
        .number = ConnMsg_FieldNumber_Moduleid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ConnMsg__storage_, moduleid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transferid",
        .dataTypeSpecific.className = NULL,
        .number = ConnMsg_FieldNumber_Transferid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ConnMsg__storage_, transferid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ConnMsg class]
                                     rootClass:[SysMsgRoot class]
                                          file:SysMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ConnMsg__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ConnMsg_ConnTag_RawValue(ConnMsg *message) {
  GPBDescriptor *descriptor = [ConnMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ConnMsg_FieldNumber_ConnTag];
  return GPBGetMessageInt32Field(message, field);
}

void SetConnMsg_ConnTag_RawValue(ConnMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [ConnMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ConnMsg_FieldNumber_ConnTag];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t ConnMsg_TrModule_RawValue(ConnMsg *message) {
  GPBDescriptor *descriptor = [ConnMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ConnMsg_FieldNumber_TrModule];
  return GPBGetMessageInt32Field(message, field);
}

void SetConnMsg_TrModule_RawValue(ConnMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [ConnMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ConnMsg_FieldNumber_TrModule];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - RelayMsg

@implementation RelayMsg

@dynamic svrCmds;
@dynamic trModule;
@dynamic contModule;
@dynamic connector;
@dynamic handleCmd;
@dynamic handleMtype;
@dynamic handleData;
@dynamic content;
@dynamic hasTouser, touser;

typedef struct RelayMsg__storage_ {
  uint32_t _has_storage_[1];
  EServerCmd svrCmds;
  ETransferModule trModule;
  EModuleType contModule;
  NSString *connector;
  NSString *handleCmd;
  NSString *handleMtype;
  NSString *handleData;
  NSData *content;
  ToUser *touser;
} RelayMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "svrCmds",
        .dataTypeSpecific.enumDescFunc = EServerCmd_EnumDescriptor,
        .number = RelayMsg_FieldNumber_SvrCmds,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RelayMsg__storage_, svrCmds),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "trModule",
        .dataTypeSpecific.enumDescFunc = ETransferModule_EnumDescriptor,
        .number = RelayMsg_FieldNumber_TrModule,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RelayMsg__storage_, trModule),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "contModule",
        .dataTypeSpecific.enumDescFunc = EModuleType_EnumDescriptor,
        .number = RelayMsg_FieldNumber_ContModule,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RelayMsg__storage_, contModule),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "connector",
        .dataTypeSpecific.className = NULL,
        .number = RelayMsg_FieldNumber_Connector,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RelayMsg__storage_, connector),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "handleCmd",
        .dataTypeSpecific.className = NULL,
        .number = RelayMsg_FieldNumber_HandleCmd,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RelayMsg__storage_, handleCmd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "handleMtype",
        .dataTypeSpecific.className = NULL,
        .number = RelayMsg_FieldNumber_HandleMtype,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RelayMsg__storage_, handleMtype),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "handleData",
        .dataTypeSpecific.className = NULL,
        .number = RelayMsg_FieldNumber_HandleData,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RelayMsg__storage_, handleData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = RelayMsg_FieldNumber_Content,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RelayMsg__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "touser",
        .dataTypeSpecific.className = GPBStringifySymbol(ToUser),
        .number = RelayMsg_FieldNumber_Touser,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RelayMsg__storage_, touser),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RelayMsg class]
                                     rootClass:[SysMsgRoot class]
                                          file:SysMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RelayMsg__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RelayMsg_SvrCmds_RawValue(RelayMsg *message) {
  GPBDescriptor *descriptor = [RelayMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RelayMsg_FieldNumber_SvrCmds];
  return GPBGetMessageInt32Field(message, field);
}

void SetRelayMsg_SvrCmds_RawValue(RelayMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [RelayMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RelayMsg_FieldNumber_SvrCmds];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t RelayMsg_TrModule_RawValue(RelayMsg *message) {
  GPBDescriptor *descriptor = [RelayMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RelayMsg_FieldNumber_TrModule];
  return GPBGetMessageInt32Field(message, field);
}

void SetRelayMsg_TrModule_RawValue(RelayMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [RelayMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RelayMsg_FieldNumber_TrModule];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t RelayMsg_ContModule_RawValue(RelayMsg *message) {
  GPBDescriptor *descriptor = [RelayMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RelayMsg_FieldNumber_ContModule];
  return GPBGetMessageInt32Field(message, field);
}

void SetRelayMsg_ContModule_RawValue(RelayMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [RelayMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RelayMsg_FieldNumber_ContModule];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - TransferMsg

@implementation TransferMsg

@dynamic type;
@dynamic flag;
@dynamic priority;
@dynamic content;

typedef struct TransferMsg__storage_ {
  uint32_t _has_storage_[1];
  ETransferType type;
  ETransferFlag flag;
  ETransferPriority priority;
  NSData *content;
} TransferMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = ETransferType_EnumDescriptor,
        .number = TransferMsg_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferMsg__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "flag",
        .dataTypeSpecific.enumDescFunc = ETransferFlag_EnumDescriptor,
        .number = TransferMsg_FieldNumber_Flag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferMsg__storage_, flag),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "priority",
        .dataTypeSpecific.enumDescFunc = ETransferPriority_EnumDescriptor,
        .number = TransferMsg_FieldNumber_Priority,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransferMsg__storage_, priority),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = TransferMsg_FieldNumber_Content,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TransferMsg__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferMsg class]
                                     rootClass:[SysMsgRoot class]
                                          file:SysMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferMsg__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t TransferMsg_Type_RawValue(TransferMsg *message) {
  GPBDescriptor *descriptor = [TransferMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransferMsg_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetTransferMsg_Type_RawValue(TransferMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [TransferMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransferMsg_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t TransferMsg_Flag_RawValue(TransferMsg *message) {
  GPBDescriptor *descriptor = [TransferMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransferMsg_FieldNumber_Flag];
  return GPBGetMessageInt32Field(message, field);
}

void SetTransferMsg_Flag_RawValue(TransferMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [TransferMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransferMsg_FieldNumber_Flag];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t TransferMsg_Priority_RawValue(TransferMsg *message) {
  GPBDescriptor *descriptor = [TransferMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransferMsg_FieldNumber_Priority];
  return GPBGetMessageInt32Field(message, field);
}

void SetTransferMsg_Priority_RawValue(TransferMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [TransferMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TransferMsg_FieldNumber_Priority];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ErrorMsg

@implementation ErrorMsg

@dynamic emodule;
@dynamic userid;
@dynamic reason;
@dynamic errcode;

typedef struct ErrorMsg__storage_ {
  uint32_t _has_storage_[1];
  ETransferModule emodule;
  int32_t errcode;
  NSString *userid;
  NSString *reason;
} ErrorMsg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "emodule",
        .dataTypeSpecific.enumDescFunc = ETransferModule_EnumDescriptor,
        .number = ErrorMsg_FieldNumber_Emodule,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ErrorMsg__storage_, emodule),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "userid",
        .dataTypeSpecific.className = NULL,
        .number = ErrorMsg_FieldNumber_Userid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ErrorMsg__storage_, userid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "reason",
        .dataTypeSpecific.className = NULL,
        .number = ErrorMsg_FieldNumber_Reason,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ErrorMsg__storage_, reason),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "errcode",
        .dataTypeSpecific.className = NULL,
        .number = ErrorMsg_FieldNumber_Errcode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ErrorMsg__storage_, errcode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ErrorMsg class]
                                     rootClass:[SysMsgRoot class]
                                          file:SysMsgRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ErrorMsg__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ErrorMsg_Emodule_RawValue(ErrorMsg *message) {
  GPBDescriptor *descriptor = [ErrorMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ErrorMsg_FieldNumber_Emodule];
  return GPBGetMessageInt32Field(message, field);
}

void SetErrorMsg_Emodule_RawValue(ErrorMsg *message, int32_t value) {
  GPBDescriptor *descriptor = [ErrorMsg descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ErrorMsg_FieldNumber_Emodule];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
